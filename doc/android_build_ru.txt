===================================
        -= В разработке =-
===================================
Android ARMv7 (Ubuntu 16.04.7 LTS)
===================================

===========================
     -= Подготовка =-
===========================
1.1 Установка пакетов.
sudo apt install git default-jre default-jdk libtool build-essential gawk automake lib32stdc++6 lib32z1 libstdc++6:i386 libc6:i386 libncurses5:i386 libbz2-1.0:i386
===========================
1.2 Создание каталогов.
mkdir ~/Qt ~/android ~/android/deps
===========================
1.3 Установка QT.
cd ~/Qt
wget http://master.qt.io/new_archive/qt/5.6/5.6.0/qt-opensource-linux-x64-android-5.6.0.run
chmod +x qt-opensource-linux-x64-android-5.6.0.run
./qt-opensource-linux-x64-android-5.6.0.run
Каталог для установки ~/Qt/Qt5.6.0
Компоненты оставить по умолчанию.
===========================
1.4 Установка SDK
cd ~/android
wget http://dl.google.com/android/android-sdk_r24.0.2-linux.tgz
tar xvfz android-sdk_r24.0.2-linux.tgz
mv android-sdk-linux sdk
Запуск
~/android/sdk/tools/android
Выбираем и устанавливаем только:
Android SDK Tools 24.4.1
Android SDK Platform-tools 23.0.1
Android SDK Build-tools 23.0.1
SDK Platform 22
ARM EABI v7a System Image 22
Google APIs 22.
===========================
1.5 Установка NDK
cd ~/android
wget https://dl.google.com/android/repository/android-ndk-r13b-linux-x86_64.zip
unzip android-ndk-r13b-linux-x86_64.zip
mv android-ndk-r13b ndk 
===========================
1.6 Установка Ant
cd ~/android
wget https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.3-bin.tar.gz
tar xvfz apache-ant-1.10.3-bin.tar.gz
mv apache-ant-1.10.3 ant
===========================
1.7 Добавляем переменные в ~/.bashrc
export PATH="$HOME/android/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH"
export ANDROID_DEV="$HOME/android/ndk/platforms/android-9/arch-arm/usr"
export AR="$HOME/android/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ar"
export AS="$HOME/android/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-as"
export CC="$HOME/android/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc"
export CFLAGS="--sysroot=$HOME/android/ndk/platforms/android-9/arch-arm/"
export CPP="$HOME/android/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-cpp"
export CPPFLAGS="--sysroot=$HOME/android/ndk/platforms/android-9/arch-arm/"
export CXX="$HOME/android/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++"
export CXXFLAGS="--sysroot=$HOME/android/ndk/platforms/android-9/arch-arm/ -I$HOME/android/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include -I$HOME/android/ndk/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include"
export LD="$HOME/android/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ld"
export NDK_PROJECT_PATH="$HOME/android/ndk"
export RANLIB="$HOME/android/ndk/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ranlib"

Перезагрузите ОС
===========================
1.8 Загрузка PirateCash
cd ~/android
git clone https://github.com/piratecash/piratecash
===========================

===========================
 -= Сборка зависимостей =-
===========================
2.1 OpenSSL
cd ~/android/deps
wget https://www.openssl.org/source/old/1.0.2/openssl-1.0.2g.tar.gz
tar xvfz openssl-1.0.2g.tar.gz
cd ~/android/deps/openssl-1.0.2g
./Configure no-shared no-dso android-armv7
make
===========================
2.2 Berkeley DB
cd ~/android/deps
wget https://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz
tar xvfz db-4.8.30.NC.tar.gz
cd ~/android/deps/db-4.8.30.NC/build_unix
../dist/configure --host=arm-none-linux --enable-cxx --disable-shared --disable-replication
make
===========================
2.3 Boost
cd ~/android/deps/
wget "https://sourceforge.net/projects/boost/files/boost/1.57.0/boost_1_57_0.tar.gz"
tar xvfz boost_1_57_0.tar.gz
cd ~/android/deps/boost_1_57_0
./bootstrap.sh

Открываем

nano project-config.jam

Заменяем все на:

import option ;

using gcc : arm : arm-linux-androideabi-g++ ;

option.set keep-going : false ;

Сохраняем.

./b2 --build-type=complete --with-chrono --with-filesystem --with-program_options --with-system --with-thread --layout=tagged toolset=gcc-arm variant=release link=static threading=multi threadapi=pthread target-os=android define=BOOST_MATH_DISABLE_FLOAT128 include=$HOME/android/ndk/sources/cxx-stl/gnu-libstdc++/4.9/include include=$HOME/android/ndk/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi/include include=$HOME/android/ndk/platforms/android-9/arch-arm/usr/include
===========================
2.4 LevelDB
cd ~/android/piratecash/src/leveldb
TARGET_OS=OS_ANDROID_CROSSCOMPILE make libleveldb.a libmemenv.a
===========================
2.5 Secp256k1
cd ~/android/piratecash/src/secp256k1
./autogen.sh
./configure --host=arm-linux-androideabi --enable-module-recovery
make
===========================
2.6 libevent
cd ~/android/deps/
wget https://github.com/libevent/libevent/releases/download/release-2.1.11-stable/libevent-2.1.11-stable.tar.gz
tar xvfz libevent-2.1.11-stable.tar.gz
cd ~/android/deps/libevent-2.1.11-stable
./configure --host=arm-linux-androideabi --disable-shared --disable-openssl --disable-libevent-regress --disable-samples --disable-dependency-tracking --enable-option-checking --disable-debug-mode --with-pic
make
===========================
2.7 MiniUPnP
cd ~/android/deps/
wget https://github.com/r4sas/MiniUPnP-for-Android-Prebuilt/archive/refs/heads/master.zip
unzip master.zip
cp -R MiniUPnP-for-Android-Prebuilt-master/miniupnpc-2.0 miniupnpc-2.0
===========================
2.8 ifaddrs
cd ~/android/piratecash/src
wget https://raw.githubusercontent.com/morristech/android-ifaddrs/master/ifaddrs.c
wget https://raw.githubusercontent.com/morristech/android-ifaddrs/master/ifaddrs.h
===========================

===========================
  -= Сборка PirateCash =-
===========================
3.1 Редактируем piratecash.pro
cd ~/android/piratecash

Открываем 
nano piratecash.pro

==
Закомментировать:

USE_QRCODE = 1

linux:LIBS += $$DPHOST/lib/libevent.a $$DPHOST/lib/libevent_pthreads.a

gensecp256k1.commands = cd $$PWD/src/secp256k1 &&

QMAKE_CLEAN += $$PWD/src/secp256k1/src/libsecp256k1_la-secp256k1.o;


!windows|contains(USE_BUILD_INFO, 1) {
    genbuild.depends = FORCE
    genbuild.commands = cd $$PWD; /bin/sh share/genbuild.sh $$OUT_PWD/build/build.h
    genbuild.target = $$OUT_PWD/build/build.h
    PRE_TARGETDEPS += $$OUT_PWD/build/build.h
    QMAKE_EXTRA_TARGETS += genbuild
    DEFINES += HAVE_BUILD_INFO
}

LIBS += -lgmp

LIBS += -lrt -ldl

==
После
DPHOSTMING = $$PWD/depends/$$HOSTMING

добавить
HOMEPATCH = /home/$$system(whoami)
==
Вместо:

win32:BOOST_LIB_SUFFIX=-mt-s
win32:BOOST_THREAD_LIB_SUFFIX=_win32$$BOOST_LIB_SUFFIX
win32:BOOST_INCLUDE_PATH=$$DPHOSTMING/include/boost
win32:BOOST_LIB_PATH=$$DPHOSTMING/lib
win32:BDB_INCLUDE_PATH=$$DPHOSTMING/include
win32:BDB_LIB_PATH=$$DPHOSTMING/lib
win32:OPENSSL_INCLUDE_PATH=$$DPHOSTMING/include/openssl
win32:OPENSSL_LIB_PATH=$$DPHOSTMING/lib
win32:MINIUPNPC_INCLUDE_PATH=$$DPHOSTMING/include/miniupnpc
win32:MINIUPNPC_LIB_PATH=$$DPHOSTMING/lib
win32:QRENCODE_INCLUDE_PATH=$$DPHOSTMING/include
win32:QRENCODE_LIB_PATH=$$DPHOSTMING/lib
win32:SECP256K1_LIB_PATH=$$PWD/src/secp256k1/.libs
win32:SECP256K1_INCLUDE_PATH=$$PWD/src/secp256k1/include
win32:INCLUDEPATH +=$$DPHOSTMING/include
win32:LIBS +=$$DPHOSTMING/lib/libevent.a

Вставить:

USE_DBUS=0
USE_ASM=1

BOOST_LIB_SUFFIX=-mt-s
BOOST_INCLUDE_PATH=$$HOMEPATCH/android/deps/boost_1_57_0
BOOST_LIB_PATH=$$HOMEPATCH/android/deps/boost_1_57_0/stage/lib
BDB_INCLUDE_PATH=$$HOMEPATCH/android/deps/db-4.8.30.NC/build_unix
BDB_LIB_PATH=$$HOMEPATCH/android/deps/db-4.8.30.NC/build_unix
OPENSSL_INCLUDE_PATH=$$HOMEPATCH/android/deps/openssl-1.0.2g/include
OPENSSL_LIB_PATH=$$HOMEPATCH/android/deps/openssl-1.0.2g
MINIUPNPC_INCLUDE_PATH=$$HOMEPATCH/android/deps/miniupnpc-2.0/include
MINIUPNPC_LIB_PATH=$$HOMEPATCH/android/deps/miniupnpc-2.0/armeabi-v7a/lib
SECP256K1_LIB_PATH=$$HOMEPATCH/android/piratecash/piratecash-dev/src/secp256k1/.libs
SECP256K1_INCLUDE_PATH=$$HOMEPATCH/android/piratecash/piratecash-dev/src/secp256k1/include
INCLUDEPATH +=$$HOMEPATCH/android/deps/libevent-2.1.11-stable/include
LIBS +=$$HOMEPATCH/android/deps/libevent-2.1.11-stable/.libs/libevent.a $$HOMEPATCH/android/deps/libevent-2.1.11-stable/.libs/libevent_pthreads.a

==
после
src/bloom.h \

добавить
src/ifaddrs.h \

==
после
src/qt/transactiontablemodel.cpp \

добавить
src/ifaddrs.c \

Сохраняем.
===========================

3.2 Редактируем compat.h
cd ~/android/piratecash/src
nano compat.h

Вместо

#include <sys/fcntl.h>

Вставить

#ifdef ANDROID
#include <fcntl.h>
#else
#include <sys/fcntl.h>
#endif


3.3 Сборка
Запускаем QtCreator
~/Qt/Qt5.6.0/Tools/QtCreator/bin/qtcreator.sh

Нажмите "Инструменты" -> "Параметры" -> "Android"
Правим:
В строке "Размещение JDK" /usr/lib/jvm/java-8-openjdk-amd64
В строке "Размещение SDK для Android" ~/android/sdk
В строке "Размещение NDK для Android" ~/android/ndk
В строке "Программа Ant" ~/android/ant/bin/ant
Нажмите "OK"
Нажмите "Файл"->"Открыть файл или проект..."
Переходим в каталог ~/android/piratecash
Выбираем piretecash.pro
Ставим галочку напротив Android для armeabi-v7a(GCC 4.9, Qt 5.6.0), остальные убираем.
Нажмите "Настроить проект"
Нажмите "Проекты" -> Изменить конфигурацию сборки: выберите "Выпуск" -> Собрать Android APK "Подробнее" -> "Создать шаблоны"
Нажмите "Завершить"
Задайте имя пакета "net.piratecash", выберите иконки для приложения в папке ~/android/piratecash/src/qt/res/icons

Выберите "целевой SDK: API 21

Далее нажмите "Сборка" -> "Собрать проект "piratecash" -> "Сохранить все" и ждите завершения компиляции.
По завершению сборки в каталоге ~/android/piratecash/build-piratecash-Android_armeabi_v7a_GCC_4_9_Qt_5_6_0-Release/android-build/bin
будет файл QtApp-debug.apk, переименуйте его в piratecash-qt.apk.
===========================
